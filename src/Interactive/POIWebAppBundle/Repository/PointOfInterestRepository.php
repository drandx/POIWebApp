<?php

namespace Interactive\POIWebAppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PointOfInterestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PointOfInterestRepository extends EntityRepository {

    public function PointsOfInterestJoinCityState($geocityName, $geoStateName, $categoriesQuery) {
//        return $this->getEntityManager()
//          ->createQueryBuilder()
//          ->select('p')
//          ->from('POIWebAppBundle:PointOfInterest', 'p')
//          ->innerJoin('p.geocity', 'gc')
//          ->innerJoin('gc.geostate', 'gs')
//          ->innerJoin('p.category', 'c')
//          ->where('gc.name like :gc_name')
//          ->setParameter('gc_name', $geocityName)
//          ->andWhere('gs.name like :gs_name')
//          ->setParameter('gs_name', $geoStateName)
//          ->andWhere('c.id = :c_id')
//          ->setParameter('c_id', 4)
//          ->getQuery()
//          ->getResult();

        if (count($categoriesQuery) == 0) {
            return null;
        }

        $generalStmt = "SELECT p.*, gc.name as city, cat.image as cat_image, cat.pinhexcolor as pincolor, "
                . "cat.name as category FROM point_of_interest AS p LEFT "
                . "JOIN geo_cities AS gc ON (gc.id = p.geocity_id) INNER JOIN category as cat ON (cat.id = p.category_id) ";

        $whereStmt = "";
        $count = 0;
        foreach ($categoriesQuery as $value) {
            if ($count == 0) {
                $whereStmt = " WHERE p.category_id = " . $value;
            } else {
                $whereStmt = $whereStmt . " OR p.category_id = " . $value;
            }
            $count++;
        }

        if ($whereStmt != "") {
            $generalStmt .= $whereStmt;
        }
        $stmt = $this->getEntityManager()->getConnection()->prepare($generalStmt);
        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;
    }

    public function getPointsOfInterest($max = null, $offset = null) {
        $qb = $this->createQueryBuilder('j')
                ->orderBy('j.geocity', 'ASC');

        if ($max) {
            $qb->setMaxResults($max);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    public function getPointsOfInterestbyQuery($stringQuery, $max = null, $offset = null) {
        
        $qb = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('p')
          ->from('POIWebAppBundle:PointOfInterest', 'p')
          ->where('p.description like :p_query')
          ->orWhere('p.name like :p_query')
          ->orWhere('p.phone like :p_query')
          ->orWhere('p.email like :p_query')
          ->orWhere('p.phone_ext like :p_query')
          ->orWhere('p.fax like :p_query')
          ->orWhere('p.address like :p_query')
          ->setParameter('p_query', '%' . $stringQuery . '%')
          ->orderBy('p.geocity', 'ASC');

        if ($max) {
            $qb->setMaxResults($max);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }
    
    public function countPointsOfInterestbyQuery($stringQuery) {
        
        $qb = $this->getEntityManager()
          ->createQueryBuilder()
          ->select('count(p.id)')
          ->from('POIWebAppBundle:PointOfInterest', 'p')
          ->where('p.description like :p_query')
          ->orWhere('p.name like :p_query')
          ->orWhere('p.phone like :p_query')
          ->orWhere('p.email like :p_query')
          ->orWhere('p.phone_ext like :p_query')
          ->orWhere('p.fax like :p_query')
          ->orWhere('p.address like :p_query')
          ->setParameter('p_query', '%' . $stringQuery . '%')
          ->orderBy('p.geocity', 'ASC');
        
        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }

    public function countPointsOfInterest() {
        $qb = $this->createQueryBuilder('j')
                ->select('count(j.id)');
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }

}
